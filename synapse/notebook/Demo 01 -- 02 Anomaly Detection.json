{
	"name": "Demo 01 -- 02 Anomaly Detection",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7c9d382c-5964-48db-9cf6-c595c7ba4339/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-syn/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://synapse-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import mmlspark\n",
					"\n",
					"if mmlspark.__spark_package_version__ < \"1.0.0-rc3\":\n",
					"    raise Exception(\"This notebook is not compatible with the current version of mmlspark: {}. Please upgrade to 1.0.0-rc3 or higher.\".format(\n",
					"        mmlspark.__spark_package_version__))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from mmlspark.cognitive import *\r\n",
					"from notebookutils import mssparkutils\r\n",
					"\r\n",
					"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
					"service_key = mssparkutils.credentials.getSecret(\"synapse-keyv\", \"AnomalyDetectorKey\", \"AzureKeyVault\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from mmlspark.cognitive import *\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"\r\n",
					"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
					"service_key = mssparkutils.credentials.getSecret(\"synapse-keyv\", \"AnomalyDetectorKey\", \"AzureKeyVault\")\r\n",
					"\r\n",
					"# Load the data into a Spark DataFrame\r\n",
					"df = spark.sql(\"SELECT * FROM default.dailyrevenue\") \\\r\n",
					"    .withColumn(\"group\", lit(\"series1\"))\r\n",
					"\r\n",
					"anomalyDetector = (SimpleDetectAnomalies()\r\n",
					"    .setLocation(\"eastus\")\r\n",
					"    .setSubscriptionKey(service_key)\r\n",
					"    .setOutputCol(\"output\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setGranularity(\"daily\")\r\n",
					"    .setTimestampCol(\"Date\")\r\n",
					"    .setValueCol(\"Revenue\")\r\n",
					"    .setGroupbyCol(\"group\")\r\n",
					")\r\n",
					"\r\n",
					"results = anomalyDetector.transform(df)\r\n",
					"\r\n",
					"# Show the results\r\n",
					"display(results.select(\"Date\", \"Revenue\", \"Date\", \"output.*\", \"error\"))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.cognitive import *\n",
					"from notebookutils import mssparkutils\n",
					"\n",
					"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\n",
					"service_key = 'cfddb4355d5345f49611324ba1a4cb37'\n",
					"\n",
					"# Load the data into a Spark DataFrame\n",
					"df = spark.sql(\"SELECT * FROM default.dailyrevenue\")\n",
					"\n",
					"anomalyDetector = (SimpleDetectAnomalies()\n",
					"    .setLocation(\"eastus\")\n",
					"    .setSubscriptionKey(service_key)\n",
					"    .setOutputCol(\"output\")\n",
					"    .setErrorCol(\"error\")\n",
					"    .setGranularity(\"daily\")\n",
					"    .setTimestampCol(\"Date\")\n",
					"    .setValueCol(\"Revenue\")\n",
					")\n",
					"\n",
					"results = anomalyDetector.transform(df)\n",
					"\n",
					"# Show the results\n",
					"display(results.select(\"Date\", \"Revenue\", \"Date\", \"output.*\", \"error\").limit(10))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}