{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-syn"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureSqlDbCloudSales_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDbCloudSales'"
		},
		"AzureSqlDbCloudStreaming_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDbCloudStreaming'"
		},
		"AzureSynapseSQLServerless_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseSQLServerless'"
		},
		"CosmosDb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb'"
		},
		"synapse-syn-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-syn-WorkspaceDefaultSqlServer'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsedatalakeg2.dfs.core.windows.net"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://synapse-keyv.vault.azure.net/"
		},
		"AzureMLService_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "7c9d382c-5964-48db-9cf6-c595c7ba4339"
		},
		"AzureMLService_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "synapse-rg"
		},
		"AzureMLService_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "3e56532b-419a-4885-b743-4fe686fb0efe"
		},
		"AzureMLService_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"synapse-syn-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsedatalakeg2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Copy_AzureSQLCloudSalesToDataLake')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_fkp",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_fkp",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "bronze/AzureSQL/CloudSales/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_fkp",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_fkp",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.csv"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.csv"
								}
							},
							{
								"source": {
									"table": "OrderDetails"
								},
								"destination": {
									"fileName": "dboOrderDetails.csv"
								}
							},
							{
								"source": {
									"table": "Orders"
								},
								"destination": {
									"fileName": "dboOrders.csv"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-15T15:11:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_fkp')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_fkp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Copy_AzureSQLCloudStreamingToDataLake')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_58o",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_58o",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "bronze/AzureSQL/CloudStreaming/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_58o",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_58o",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.csv"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.csv"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.csv"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-15T15:26:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_58o')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_58o')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Copy_CosmosDbToDataLake')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_xsh",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies"
							},
							{
								"name": "Destination",
								"value": "bronze/CosmosDB/movies.json"
							}
						],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_xsh",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_xsh",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-15T16:21:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_xsh')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_xsh')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Dataflow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Pipeline_Dataflow_Ingest",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pipeline_Dataflow_Ingest",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Pipeline_Dataflow_DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Pipeline_Dataflow_Ingest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pipeline_Dataflow_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-18T17:12:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Pipeline_Dataflow_Ingest')]",
				"[concat(variables('workspaceId'), '/pipelines/Pipeline_Dataflow_DW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Dataflow_DW')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dataflow_DimCustomers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_DimCustomers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatasetCustomersParquet": {},
									"DatasetDimCustomersParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dataflow_DimMovieActors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_DimMovieActors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatasetMoviesParquet": {},
									"DatasetDimActorsParquet": {},
									"DatasetFactMovieActorsParquet": {},
									"DatasetDimMoviesParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dataflow_DimTransactions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_DimTransactions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatasetOrdersParquet": {},
									"DatasetDimTransactionsParquet": {},
									"DatasetDimTransactionDetailsParquet": {},
									"DatasetFactTransactionDetailsParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-18T16:55:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_DimCustomers')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_DimMovieActors')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_DimTransactions')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Dataflow_Ingest')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dataflow_Customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Customers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CloudSalesCustomers": {},
									"CloudStreamingCustomers": {},
									"Customers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Dataflow_Orders",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Orders",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CloudSalesOrders": {},
									"CloudSalesOrderDetails": {},
									"Orders": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dataflow_Movies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Movies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesBronze": {},
									"MoviesSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-18T17:11:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Customers')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Orders')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Movies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Test')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dataflow_Temp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Temp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Account": {},
									"AccountNew": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Temp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSV_Temp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "temp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSV_Temp_Account_New')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "account-new.csv",
						"fileSystem": "temp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_CloudSales_Customers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.csv",
						"folderPath": "AzureSQL/CloudSales",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_CloudSales_OrderDetails')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrderDetails.csv",
						"folderPath": "AzureSQL/CloudSales",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderDetailID",
						"type": "String"
					},
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "MovieID",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "UnitCost",
						"type": "String"
					},
					{
						"name": "LineNumber",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_CloudSales_Orders')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrders.csv",
						"folderPath": "AzureSQL/CloudSales",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "ShipDate",
						"type": "String"
					},
					{
						"name": "TotalCost",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_CloudStreaming_Customers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.csv",
						"folderPath": "AzureSQL/CloudStreaming",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_Customers_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "customers.parquet",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_DimActors_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DimActors.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_DimCustomers_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DimCustomers.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_DimMovies_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DimMovies.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_DimTransactionDetails_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DimTransactionDetails.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_DimTransactions_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DimTransactions.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_FactMovieActors_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "FactMovieActors.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_FactTransactionDetails_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "FactTransactionDetails.parquet",
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_Movies_JSON')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movies.json",
						"folderPath": "CosmosDB",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									}
								}
							}
						},
						"availabilityDate": {
							"type": "string"
						},
						"genre": {
							"type": "string"
						},
						"rating": {
							"type": "string"
						},
						"releaseYear": {
							"type": "integer"
						},
						"runtime": {
							"type": "integer"
						},
						"streamingAvailabilityDate": {
							"type": "string"
						},
						"tier": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"_rid": {
							"type": "string"
						},
						"_self": {
							"type": "string"
						},
						"_etag": {
							"type": "string"
						},
						"_attachments": {
							"type": "string"
						},
						"_ts": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_Movies_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies.parquet",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset_Orders_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "orders.parquet",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_58o')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "AzureSQL/CloudStreaming",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_fkp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "AzureSQL/CloudSales",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_xsh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movies.json",
						"folderPath": "CosmosDB",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_58o')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbCloudStreaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDbCloudStreaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_fkp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbCloudSales",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDbCloudSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_xsh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									}
								}
							}
						},
						"availabilityDate": {
							"type": "string"
						},
						"genre": {
							"type": "string"
						},
						"rating": {
							"type": "string"
						},
						"releaseYear": {
							"type": "integer"
						},
						"runtime": {
							"type": "integer"
						},
						"streamingAvailabilityDate": {
							"type": "string"
						},
						"tier": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						}
					}
				},
				"typeProperties": {
					"collectionName": "movies"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CosmosDb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "synapse-aml",
					"servicePrincipalId": "[parameters('AzureMLService_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "AzureSynapseAmlAppSecret"
					},
					"tenant": "[parameters('AzureMLService_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDbCloudSales')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDbCloudSales_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDbCloudStreaming')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDbCloudStreaming_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseSQLServerless')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseSQLServerless_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "1dfd9037-1000-4176-911b-769b19e77d20",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-syn-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-syn-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-syn-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-syn-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Customers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_CloudSales_Customers",
								"type": "DatasetReference"
							},
							"name": "CloudSalesCustomers"
						},
						{
							"dataset": {
								"referenceName": "Dataset_CloudStreaming_Customers",
								"type": "DatasetReference"
							},
							"name": "CloudStreamingCustomers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_Customers_Parquet",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"transformations": [
						{
							"name": "UnionCustomers"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('roundRobin', 5)) ~> CloudSalesCustomers\nsource(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('roundRobin', 5)) ~> CloudStreamingCustomers\nCloudSalesCustomers, CloudStreamingCustomers union(byName: true)~> UnionCustomers\nUnionCustomers sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset_CloudSales_Customers')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_CloudStreaming_Customers')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_Customers_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_DimCustomers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_Customers_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetCustomersParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_DimCustomers_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetDimCustomersParquet"
						}
					],
					"transformations": [
						{
							"name": "UniqueCustomers"
						},
						{
							"name": "DuplicateCustomersParquet"
						},
						{
							"name": "JoinUniqueCustomers"
						},
						{
							"name": "DeriveProcessDate"
						},
						{
							"name": "SelectDimCustomers"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 5,\n\t\tCustomerID\n\t)) ~> DatasetCustomersParquet\nDatasetCustomersParquet aggregate(groupBy(CustomerID),\n\tDummyCount = count(1)) ~> UniqueCustomers\nDatasetCustomersParquet select(mapColumn(\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DuplicateCustomersParquet\nUniqueCustomers, DuplicateCustomersParquet join(UniqueCustomers@CustomerID == DuplicateCustomersParquet@CustomerID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUniqueCustomers\nJoinUniqueCustomers derive(ProcessDate = currentDate()) ~> DeriveProcessDate\nDeriveProcessDate select(mapColumn(\n\t\tCustomerID = UniqueCustomers@CustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tProcessDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimCustomers\nSelectDimCustomers sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetDimCustomersParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset_Customers_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_DimCustomers_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_DimMovieActors')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_Movies_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetMoviesParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_DimActors_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetDimActorsParquet"
						},
						{
							"dataset": {
								"referenceName": "Dataset_FactMovieActors_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetFactMovieActorsParquet"
						},
						{
							"dataset": {
								"referenceName": "Dataset_DimMovies_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetDimMoviesParquet"
						}
					],
					"transformations": [
						{
							"name": "UniqueActors"
						},
						{
							"name": "DeriveActorID"
						},
						{
							"name": "DimActors"
						},
						{
							"name": "MovieActors"
						},
						{
							"name": "JoinActorID"
						},
						{
							"name": "RemoveActorName"
						},
						{
							"name": "DeriveMovieActorsID"
						},
						{
							"name": "DedupMovies"
						},
						{
							"name": "RemoveActorandCatalogID"
						}
					],
					"script": "source(output(\n\t\tActor as string,\n\t\tReleaseDate as date,\n\t\tGenre as string,\n\t\tRating as string,\n\t\tAvailabilityYear as integer,\n\t\tRuntime as short,\n\t\tAvailabilityDate as date,\n\t\tMovieTier as short,\n\t\tMovieTitle as string,\n\t\tMovieID as string,\n\t\tCatalogID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 5,\n\t\tMovieID\n\t)) ~> DatasetMoviesParquet\nDatasetMoviesParquet aggregate(groupBy(Actor),\n\tDummyCount = count(1)) ~> UniqueActors\nUniqueActors derive(ActorID = uuid()) ~> DeriveActorID\nDeriveActorID select(mapColumn(\n\t\tActorName = Actor,\n\t\tActorID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimActors\nDatasetMoviesParquet select(mapColumn(\n\t\tActor,\n\t\tMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MovieActors\nMovieActors, DimActors join(Actor == ActorName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinActorID\nJoinActorID select(mapColumn(\n\t\tMovieID,\n\t\tActorID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActorName\nRemoveActorName derive(MovieActorID = uuid()) ~> DeriveMovieActorsID\nRemoveActorandCatalogID aggregate(groupBy(MovieID),\n\teach(match(name!='MovieID'), $$ = max($$))) ~> DedupMovies\nDatasetMoviesParquet select(mapColumn(\n\t\tReleaseDate,\n\t\tGenre,\n\t\tRating,\n\t\tAvailabilityYear,\n\t\tRuntime,\n\t\tAvailabilityDate,\n\t\tMovieTier,\n\t\tMovieTitle,\n\t\tMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveActorandCatalogID\nDimActors sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetDimActorsParquet\nDeriveMovieActorsID sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetFactMovieActorsParquet\nDedupMovies sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetDimMoviesParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset_Movies_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_DimActors_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_FactMovieActors_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_DimMovies_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_DimTransactions')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_Orders_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetOrdersParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_DimTransactions_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetDimTransactionsParquet"
						},
						{
							"dataset": {
								"referenceName": "Dataset_DimTransactionDetails_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetDimTransactionDetailsParquet"
						},
						{
							"dataset": {
								"referenceName": "Dataset_FactTransactionDetails_Parquet",
								"type": "DatasetReference"
							},
							"name": "DatasetFactTransactionDetailsParquet"
						}
					],
					"transformations": [
						{
							"name": "UniqueOrders"
						},
						{
							"name": "DuplicateOrders"
						},
						{
							"name": "DeriveProcessDate"
						},
						{
							"name": "UniqueOrderDetails"
						},
						{
							"name": "JoinOrderDetails"
						},
						{
							"name": "DimTransactionDetails"
						},
						{
							"name": "DeriveProcessDate2"
						},
						{
							"name": "FactTransactionDetails"
						},
						{
							"name": "DeriveID"
						},
						{
							"name": "SelectTransactionColumns"
						}
					],
					"script": "source(output(\n\t\tOrderID as string,\n\t\tCustomerID as string,\n\t\tOrderDate as string,\n\t\tShipDate as string,\n\t\tTotalCost as string,\n\t\tOrderDetailID as string,\n\t\tMovieID as string,\n\t\tQuantity as string,\n\t\tUnitCost as string,\n\t\tLineNumber as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('roundRobin', 5)) ~> DatasetOrdersParquet\nSelectTransactionColumns aggregate(groupBy(TransactionID),\n\teach(match(name!='TransactionID'), $$ = max($$))) ~> UniqueOrders\nDatasetOrdersParquet select(mapColumn(\n\t\tOrderID,\n\t\tCustomerID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tTotalCost,\n\t\tOrderDetailID,\n\t\tMovieID,\n\t\tQuantity,\n\t\tUnitCost,\n\t\tLineNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DuplicateOrders\nUniqueOrders derive(ProcessDate = currentDate()) ~> DeriveProcessDate\nDatasetOrdersParquet aggregate(groupBy(OrderDetailID),\n\tDummyCount = count()) ~> UniqueOrderDetails\nUniqueOrderDetails, DuplicateOrders join(UniqueOrderDetails@OrderDetailID == DuplicateOrders@OrderDetailID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinOrderDetails\nJoinOrderDetails select(mapColumn(\n\t\tTransactionDetailID = UniqueOrderDetails@OrderDetailID,\n\t\tMovieID,\n\t\tQuantity,\n\t\tUnitCost,\n\t\tLineNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimTransactionDetails\nDimTransactionDetails derive(ProcessDate = currentDate()) ~> DeriveProcessDate2\nDuplicateOrders select(mapColumn(\n\t\tTransactionID = OrderID,\n\t\tTransactionDetailID = OrderDetailID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FactTransactionDetails\nFactTransactionDetails derive(ID = uuid()) ~> DeriveID\nDatasetOrdersParquet select(mapColumn(\n\t\tTransactionID = OrderID,\n\t\tCustomerID,\n\t\tTransactionDate = OrderDate,\n\t\tShipDate,\n\t\tTotalCost\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTransactionColumns\nDeriveProcessDate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetDimTransactionsParquet\nDeriveProcessDate2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetDimTransactionDetailsParquet\nDeriveID sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DatasetFactTransactionDetailsParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset_Orders_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_DimTransactions_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_DimTransactionDetails_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_FactTransactionDetails_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Movies')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_Movies_JSON",
								"type": "DatasetReference"
							},
							"name": "MoviesBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_Movies_Parquet",
								"type": "DatasetReference"
							},
							"name": "MoviesSilver"
						}
					],
					"transformations": [
						{
							"name": "FlattenActors"
						},
						{
							"name": "DeriveCatalogID"
						}
					],
					"script": "source(output(\n\t\t{_attachments} as string,\n\t\t{_etag} as string,\n\t\t{_rid} as string,\n\t\t{_self} as string,\n\t\t{_ts} as integer,\n\t\tactors as (name as string)[],\n\t\tavailabilityDate as timestamp,\n\t\tgenre as string,\n\t\tid as string,\n\t\trating as string,\n\t\treleaseYear as short,\n\t\truntime as short,\n\t\tstreamingAvailabilityDate as timestamp,\n\t\ttier as short,\n\t\ttitle as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> MoviesBronze\nMoviesBronze foldDown(unroll(actors),\n\tmapColumn(\n\t\tActor = actors.name,\n\t\tReleaseDate = availabilityDate,\n\t\tGenre = genre,\n\t\tRating = rating,\n\t\tAvailabilityYear = releaseYear,\n\t\tRuntime = runtime,\n\t\tAvailabilityDate = streamingAvailabilityDate,\n\t\tMovieTier = tier,\n\t\tMovieTitle = title,\n\t\tMovieID = id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenActors\nFlattenActors derive(CatalogID = uuid(),\n\t\tReleaseDate = toDate(ReleaseDate),\n\t\tAvailabilityYear = toInteger(AvailabilityYear),\n\t\tAvailabilityDate = toDate(AvailabilityDate)) ~> DeriveCatalogID\nDeriveCatalogID sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tpartitionBy('hash', 5,\n\t\tMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MoviesSilver"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset_Movies_JSON')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_Movies_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Orders')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_CloudSales_Orders",
								"type": "DatasetReference"
							},
							"name": "CloudSalesOrders"
						},
						{
							"dataset": {
								"referenceName": "Dataset_CloudSales_OrderDetails",
								"type": "DatasetReference"
							},
							"name": "CloudSalesOrderDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_Orders_Parquet",
								"type": "DatasetReference"
							},
							"name": "Orders"
						}
					],
					"transformations": [
						{
							"name": "JoinOrders"
						},
						{
							"name": "SelectOrders"
						}
					],
					"script": "source(output(\n\t\tOrderID as string,\n\t\tCustomerID as string,\n\t\tOrderDate as string,\n\t\tShipDate as string,\n\t\tTotalCost as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 5,\n\t\tOrderID\n\t)) ~> CloudSalesOrders\nsource(output(\n\t\tOrderDetailID as string,\n\t\tOrderID as string,\n\t\tMovieID as string,\n\t\tQuantity as string,\n\t\tUnitCost as string,\n\t\tLineNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 5,\n\t\tOrderID\n\t)) ~> CloudSalesOrderDetails\nCloudSalesOrders, CloudSalesOrderDetails join(CloudSalesOrders@OrderID == CloudSalesOrderDetails@OrderID,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> JoinOrders\nJoinOrders select(mapColumn(\n\t\tOrderID = CloudSalesOrders@OrderID,\n\t\tCustomerID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tTotalCost,\n\t\tOrderDetailID,\n\t\tMovieID,\n\t\tQuantity,\n\t\tUnitCost,\n\t\tLineNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOrders\nSelectOrders sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset_CloudSales_Orders')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_CloudSales_OrderDetails')]",
				"[concat(variables('workspaceId'), '/datasets/Dataset_Orders_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Temp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Account"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AccountNew"
						}
					],
					"transformations": [
						{
							"name": "DerivedAddressComposite"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tId as string,\n\t\tSinkCreatedOn as string,\n\t\tSinkModifiedOn as string,\n\t\tstatecode as string,\n\t\tstatuscode as string,\n\t\taddress1_addresstypecode as string,\n\t\tmsdyn_travelchargetype as integer,\n\t\taddress1_shippingmethodcode as string,\n\t\taccountcategorycode as string,\n\t\taddress1_freighttermscode as string,\n\t\tpreferredappointmenttimecode as string,\n\t\taccountclassificationcode as string,\n\t\tcustomersizecode as string,\n\t\townershipcode as string,\n\t\taddress2_freighttermscode as string,\n\t\tpreferredcontactmethodcode as string,\n\t\tindustrycode as string,\n\t\tshippingmethodcode as string,\n\t\tpaymenttermscode as string,\n\t\tbusinesstypecode as string,\n\t\taccountratingcode as string,\n\t\taddress2_addresstypecode as string,\n\t\tcustomertypecode as string,\n\t\taddress2_shippingmethodcode as string,\n\t\tpreferredappointmentdaycode as string,\n\t\tterritorycode as boolean,\n\t\tdonotpostalmail as boolean,\n\t\tcreditonhold as boolean,\n\t\tdonotbulkpostalmail as boolean,\n\t\tdonotbulkemail as boolean,\n\t\tdonotfax as boolean,\n\t\tdonotemail as boolean,\n\t\tfollowemail as boolean,\n\t\tparticipatesinworkflow as boolean,\n\t\tmarketingonly as boolean,\n\t\tisprivate as boolean,\n\t\tmerged as boolean,\n\t\tdonotphone as boolean,\n\t\tdonotsendmm as boolean,\n\t\tmsdyn_taxexempt as boolean,\n\t\tmsa_managingpartnerid as string,\n\t\tmsa_managingpartnerid_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\toriginatingleadid as string,\n\t\toriginatingleadid_entitytype as string,\n\t\tterritoryid as string,\n\t\tterritoryid_entitytype as string,\n\t\tslaid as string,\n\t\tslaid_entitytype as string,\n\t\tparentaccountid as string,\n\t\tparentaccountid_entitytype as string,\n\t\tmsdyn_serviceterritory as string,\n\t\tmsdyn_serviceterritory_entitytype as string,\n\t\tprimarycontactid as string,\n\t\tprimarycontactid_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\tmsdyn_workhourtemplate as string,\n\t\tmsdyn_workhourtemplate_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\tcreatedbyexternalparty as string,\n\t\tcreatedbyexternalparty_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\tslainvokedid as string,\n\t\tslainvokedid_entitytype as string,\n\t\tpreferredequipmentid as string,\n\t\tpreferredequipmentid_entitytype as string,\n\t\ttransactioncurrencyid as string,\n\t\ttransactioncurrencyid_entitytype as string,\n\t\tmsdyn_billingaccount as string,\n\t\tmsdyn_billingaccount_entitytype as string,\n\t\tmasterid as string,\n\t\tmasterid_entitytype as string,\n\t\tmodifiedbyexternalparty as string,\n\t\tmodifiedbyexternalparty_entitytype as string,\n\t\tdefaultpricelevelid as string,\n\t\tdefaultpricelevelid_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\tmsdyn_preferredresource as string,\n\t\tmsdyn_preferredresource_entitytype as string,\n\t\tpreferredserviceid as string,\n\t\tpreferredserviceid_entitytype as string,\n\t\tmsdyn_salestaxcode as string,\n\t\tmsdyn_salestaxcode_entitytype as string,\n\t\tpreferredsystemuserid as string,\n\t\tpreferredsystemuserid_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\taging90 as string,\n\t\topenrevenue as double,\n\t\taging30 as string,\n\t\tmsdyn_travelcharge_base as string,\n\t\taging60_base as string,\n\t\tcreditlimit as string,\n\t\topenrevenue_base as double,\n\t\tcreditlimit_base as string,\n\t\taging60 as string,\n\t\trevenue as double,\n\t\tmsdyn_travelcharge as string,\n\t\trevenue_base as double,\n\t\taging90_base as string,\n\t\tmarketcap_base as string,\n\t\tmarketcap as string,\n\t\taging30_base as string,\n\t\temailaddress3 as string,\n\t\temailaddress2 as string,\n\t\temailaddress1 as string,\n\t\tmasteraccountidyominame as string,\n\t\taddress1_city as string,\n\t\taddress1_line1 as string,\n\t\tadx_createdbyipaddress as string,\n\t\tmodifiedon as string,\n\t\twebsiteurl as string,\n\t\taddress1_longitude as string,\n\t\tentityimage_timestamp as string,\n\t\tsharesoutstanding as string,\n\t\tadx_modifiedbyusername as string,\n\t\tmsa_managingpartneridyominame as string,\n\t\tprimarycontactidname as string,\n\t\ttransactioncurrencyidname as string,\n\t\tmsdyn_salestaxcodename as string,\n\t\tpreferredsystemuseridyominame as string,\n\t\ttelephone1 as string,\n\t\ttelephone2 as string,\n\t\topendeals_date as string,\n\t\tmodifiedbyexternalpartyyominame as string,\n\t\tmasteraccountidname as string,\n\t\tpreferredsystemuseridname as string,\n\t\taddress2_stateorprovince as string,\n\t\taddress2_line2 as string,\n\t\tmsdyn_preferredresourcename as string,\n\t\taddress1_line3 as string,\n\t\tname as string,\n\t\tonholdtime as string,\n\t\tparentaccountidname as string,\n\t\toriginatingleadidname as string,\n\t\taddress1_utcoffset as string,\n\t\tnumberofemployees as short,\n\t\tmodifiedbyexternalpartyname as string,\n\t\taddress1_telephone1 as string,\n\t\texchangerate as double,\n\t\taddress2_county as string,\n\t\ttelephone3 as string,\n\t\tfax as string,\n\t\taddress2_city as string,\n\t\tmsdyn_taxexemptnumber as string,\n\t\taddress2_latitude as string,\n\t\tcreatedon as string,\n\t\ttimespentbymeonemailandmeetings as string,\n\t\taddress1_composite as string,\n\t\topendeals_state as boolean,\n\t\taddress2_postalcode as string,\n\t\tlastusedincampaign as string,\n\t\tprocessid as string,\n\t\towneridyominame as string,\n\t\tentityimage_url as string,\n\t\tteamsfollowed as string,\n\t\taddress2_line3 as string,\n\t\tdescription as string,\n\t\ttimezoneruleversionnumber as string,\n\t\taddress1_county as string,\n\t\tcreatedbyname as string,\n\t\tmsdyn_workhourtemplatename as string,\n\t\taddress2_postofficebox as string,\n\t\taddress2_telephone1 as string,\n\t\taddress2_telephone2 as string,\n\t\taddress2_telephone3 as string,\n\t\toriginatingleadidyominame as string,\n\t\tadx_createdbyusername as string,\n\t\taddress1_addressid as string,\n\t\ttraversedpath as string,\n\t\tterritoryidname as string,\n\t\tyominame as string,\n\t\tcreatedonbehalfbyname as string,\n\t\taddress2_name as string,\n\t\topenrevenue_state as boolean,\n\t\taddress1_country as string,\n\t\tprimarysatoriid as string,\n\t\towneridtype as string,\n\t\tentityimageid as string,\n\t\tadx_modifiedbyipaddress as string,\n\t\tprimarytwitterid as string,\n\t\towneridname as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\toverriddencreatedon as string,\n\t\taddress2_composite as string,\n\t\taddress1_stateorprovince as string,\n\t\tmsa_managingpartneridname as string,\n\t\tpreferredserviceidname as string,\n\t\tcreatedbyexternalpartyyominame as string,\n\t\tmsdyn_billingaccountyominame as string,\n\t\taddress1_telephone2 as string,\n\t\taddress1_telephone3 as string,\n\t\taddress1_postofficebox as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\tslainvokedidname as string,\n\t\taddress2_country as string,\n\t\tsic as string,\n\t\taddress2_utcoffset as string,\n\t\taccountnumber as string,\n\t\taddress2_fax as string,\n\t\taddress2_addressid as string,\n\t\taddress2_longitude as string,\n\t\tftpsiteurl as string,\n\t\tpreferredequipmentidname as string,\n\t\taddress1_primarycontactname as string,\n\t\tmodifiedbyyominame as string,\n\t\tlastonholdtime as string,\n\t\taddress1_line2 as string,\n\t\topenrevenue_date as string,\n\t\taddress2_upszone as string,\n\t\taddress1_postalcode as integer,\n\t\ttickersymbol as string,\n\t\tstageid as string,\n\t\tutcconversiontimezonecode as string,\n\t\tcreatedbyexternalpartyname as string,\n\t\tdefaultpricelevelidname as string,\n\t\tmsdyn_serviceterritoryname as string,\n\t\tstockexchange as string,\n\t\tmsdyn_externalaccountid as string,\n\t\tmsdyn_billingaccountname as string,\n\t\timportsequencenumber as short,\n\t\tmsdyn_workorderinstructions as string,\n\t\tversionnumber as integer,\n\t\taccountid as string,\n\t\taddress1_name as string,\n\t\taddress1_fax as string,\n\t\taddress1_latitude as string,\n\t\tprimarycontactidyominame as string,\n\t\tmodifiedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\taddress2_line1 as string,\n\t\taddress1_upszone as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\tslaname as string,\n\t\tparentaccountidyominame as string,\n\t\taddress2_primarycontactname as string,\n\t\topendeals as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'temp',\n\tfileName: 'account.csv',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tqutoChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tmultiLineRow: true) ~> Account\nAccount derive(address1_composite_new = regexReplace(address1_composite, `(\\r\\n|\\n|\\r)`, '\\\\n'),\n\t\taddress1_composite_new2 = regexReplace(address1_composite, `(\\r\\n|\\n|\\r)`, '\\\\\\\\n'),\n\t\taddress1_composite_new3 = regexReplace(address1_composite, `(\\r\\n|\\n|\\r)`, '')) ~> DerivedAddressComposite\nDerivedAddressComposite select(mapColumn(\n\t\taddress1_composite,\n\t\taddress1_composite_new,\n\t\taddress1_composite_new2,\n\t\taddress1_composite_new3\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tfileSystem: 'temp',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tqutoChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['account-new.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AccountNew"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 01 Create Movie POS Views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Drop database if it exists\nDROP DATABASE IF EXISTS Demo\nGO\n\n\n-- Create new database\nCREATE DATABASE [Demo];\nGO\n\n\nUSE [Demo];\nGO\n\n----\n-- Create views for dimension and fact tables\n----\n\nDROP VIEW IF EXISTS dimActorsVw;\nGO\n\nCREATE VIEW dimActorsVw AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/DimActors.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n\n\nDROP VIEW IF EXISTS dimMoviesVw;\nGO\n\nCREATE VIEW dimMoviesVw AS\nSELECT\n    MovieID\n    , MovieTitle\n    , CAST( ReleaseDate AS Date ) AS ReleaseDate\n    , Genre\n    , Rating\n    , CAST( AvailabilityYear AS VARCHAR ) AS AvailabilityYear\n    , CAST( Runtime AS INT ) AS Runtime\n    , CAST( AvailabilityDate AS VARCHAR ) AS AvailabilityDate\n    , CAST( MovieTier AS INT ) AS MovieTier\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/DimMovies.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n\n\n\nDROP VIEW IF EXISTS factMovieActorsVw;\nGO\n\nCREATE VIEW factMovieActorsVw AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/FactMovieActors.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n\n\nDROP VIEW IF EXISTS dimCustomersVw;\nGO\n\nCREATE VIEW dimCustomersVw AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/DimCustomers.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n\n\nDROP VIEW IF EXISTS dimTransactionsVw;\nGO\n\nCREATE VIEW dimTransactionsVw AS\nSELECT\n    TransactionID\n    , CustomerID\n    , CAST( TransactionDate AS Date ) AS TransactionDate\n    , CAST( ShipDate AS Date ) AS ShipDate\n    , CAST( ProcessDate AS Date ) AS ProcessDate\n    , ROUND( CAST( TotalCost AS FLOAT ), 2 )  AS TotalCost\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/DimTransactions.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n\n\nDROP VIEW IF EXISTS dimTransactionDetailsVw;\nGO\n\nCREATE VIEW dimTransactionDetailsVw AS\nSELECT\n    TransactionDetailID\n    , MovieID\n    , CAST( Quantity AS INT ) AS Quantity\n    , ROUND( CAST( UnitCost AS FLOAT ), 2 ) AS UnitCost\n    , CAST( LineNumber AS INT ) AS LineNumber\n    , CAST( ProcessDate AS Date ) AS ProcessDate\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/DimTransactionDetails.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n\nDROP VIEW IF EXISTS factTransactionDetailsVw;\nGO\n\nCREATE VIEW factTransactionDetailsVw AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/FactTransactionDetails.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 02 Query Movies')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE [Demo];\nGO\n\n\nSELECT \n\tv.Name\n    , v.Type_desc\n    , v.Create_date\nFROM \n\tsys.views as v;\nGO\n\n\n-- Get top selling movies in quantities\nWITH top_movie_ids AS \n(\n    SELECT \n        TOP 10 DTD.MovieID\n        , SUM( CAST(Quantity AS INT) ) AS Quantity\n    FROM\n        factTransactionDetailsVw AS [FTD]\n    INNER JOIN \n        dimTransactionDetailsVw AS [DTD]\n        ON (FTD.TransactionDetailID = DTD.TransactionDetailID)\n    GROUP BY DTD.MovieID\n    ORDER BY Quantity DESC\n)\nSELECT\n    t.MovieID\n    , DM.MovieTitle\n    , MAX( t.Quantity ) AS Quantity\nFROM top_movie_ids t\nINNER JOIN \n    dimMoviesVw AS [DM]\n    ON (t.MovieID = DM.MovieID)\nGROUP BY t.MovieID, DM.MovieTitle\nORDER BY Quantity DESC\n;\n\n\n-- Get top selling movies in revenue\nWITH top_movie_ids AS \n(\n    SELECT \n        TOP 10 DTD.MovieID\n        , SUM( CAST(DTD.Quantity AS FLOAT) * DTD.UnitCost ) AS TotalRevenue\n    FROM\n        dimTransactionDetailsVw AS [DTD]\n    GROUP BY DTD.MovieID\n    ORDER BY TotalRevenue DESC\n)\nSELECT\n    t.MovieID\n    , DM.MovieTitle\n    , MAX( t.TotalRevenue ) AS TotalRevenue\nFROM top_movie_ids t\nINNER JOIN \n    dimMoviesVw AS [DM]\n    ON (t.MovieID = DM.MovieID)\nGROUP BY t.MovieID, DM.MovieTitle\nORDER BY TotalRevenue DESC\n;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "Demo",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 03 Create External Tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( \n        FORMAT_TYPE = PARQUET,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n    )\nGO\n\n-- -- This creates an external file format for CSV file with a single header row.\n-- CREATE EXTERNAL FILE FORMAT skipHeader_CSV\n-- WITH (FORMAT_TYPE = DELIMITEDTEXT,\n--       FORMAT_OPTIONS(\n--           FIELD_TERMINATOR = ',',\n--           STRING_DELIMITER = '\"',\n--           FIRST_ROW = 2, \n--           USE_TYPE_DEFAULT = True)\n-- )\n\n-- -- This creates an external file format for a JSON file that compresses the data with the org.apache.io.compress.SnappyCodec data compression method. \n-- -- This applies to Azure SQL Edge ONLY and is currently not supported for other SQL products.\n-- CREATE EXTERNAL FILE FORMAT jsonFileFormat  \n-- WITH (  \n--     FORMAT_TYPE = JSON,  \n--     DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n-- );  \n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'gold_synapsedatalakeg2_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [gold_synapsedatalakeg2_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://synapsedatalakeg2.dfs.core.windows.net/gold', \n\t)\nGo\n\nCREATE EXTERNAL TABLE DimActor (\n\t[ActorName] varchar(8000),\n\t[ActorID] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'DimActors.parquet/*.parquet',\n\tDATA_SOURCE = [gold_synapsedatalakeg2_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM DimActor\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "Demo"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 04 CETAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create external file format for Parquet\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( \n        FORMAT_TYPE = PARQUET,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n    )\nGO\n\n-- Create external data source for data lake\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'gold_synapsedatalakeg2_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [gold_synapsedatalakeg2_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://synapsedatalakeg2.dfs.core.windows.net/gold', \n\t)\nGo\n\n-- CETAS (Create external table as select) to write to data lake\nCREATE EXTERNAL TABLE TopMovies\nWITH (\n    LOCATION = 'TopMovies.parquet/',\n    DATA_SOURCE = [gold_synapsedatalakeg2_dfs_core_windows_net],\n    FILE_FORMAT = [SynapseParquetFormat]\n)\nAS\nWITH top_movie_ids AS \n(\n    SELECT \n        TOP 10 DTD.MovieID\n        , SUM( CAST(Quantity AS INT) ) AS Quantity\n    FROM\n        factTransactionDetailsVw AS [FTD]\n    INNER JOIN \n        dimTransactionDetailsVw AS [DTD]\n        ON (FTD.TransactionDetailID = DTD.TransactionDetailID)\n    GROUP BY DTD.MovieID\n    ORDER BY Quantity DESC\n)\nSELECT\n    t.MovieID\n    , DM.MovieTitle\n    , MAX( t.Quantity ) AS Quantity\nFROM top_movie_ids t\nINNER JOIN \n    dimMoviesVw AS [DM]\n    ON (t.MovieID = DM.MovieID)\nGROUP BY t.MovieID, DM.MovieTitle\nORDER BY Quantity DESC\n;\nGO\n\nSELECT * FROM TopMovies\nGO\n\n--DROP EXTERNAL TABLE TopMovies;\n--GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "Demo"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 05 Stored Procedures')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE [Demo];\nGO\n\nCREATE PROCEDURE drop_external_table_if_exists @name SYSNAME\nAS BEGIN\n    IF (0 <> (SELECT COUNT(*) FROM sys.external_tables WHERE name = @name))\n    BEGIN\n        DECLARE @drop_stmt NVARCHAR(200) = N'DROP EXTERNAL TABLE ' + @name; \n        EXEC sp_executesql @tsql = @drop_stmt;\n    END\nEND\nGO\n\nCREATE PROCEDURE drop_external_file_format_if_exists @name SYSNAME\nAS BEGIN\n    IF (0 <> (SELECT COUNT(*) FROM sys.external_file_formats WHERE name = @name))\n    BEGIN\n        DECLARE @drop_stmt NVARCHAR(200) = N'DROP EXTERNAL FILE FORMAT ' + @name; \n        EXEC sp_executesql @tsql = @drop_stmt;\n    END\nEND\nGO\n\nCREATE PROCEDURE drop_external_data_source_if_exists @name SYSNAME\nAS BEGIN\n    IF (0 <> (SELECT COUNT(*) FROM sys.external_data_sources WHERE name = @name))\n    BEGIN\n        DECLARE @drop_stmt NVARCHAR(200) = N'DROP EXTERNAL DATA SOURCE ' + @name; \n        EXEC sp_executesql @tsql = @drop_stmt;\n    END\nEND\nGO\n\n-- EXEC drop_external_table_if_exists 'mytest';\n-- EXEC drop_external_file_format_if_exists 'mytest';\n-- EXEC drop_external_data_source_if_exists 'mytest';\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "Demo"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PBI Demo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Drop database if it exists\nDROP DATABASE IF EXISTS PBIDemo\nGO\n\n-- Create new database\nCREATE DATABASE [PBIDemo];\nGO\n\n-- There is no credential in data surce. We are using public storage account which doesn't need a secret.\nCREATE EXTERNAL DATA SOURCE AzureOpenData\nWITH ( LOCATION = 'https://azureopendatastorage.blob.core.windows.net/')\n\nDROP VIEW IF EXISTS usPopulationView;\nGO\n\nCREATE VIEW usPopulationView AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'censusdatacontainer/release/us_population_county/year=20*/*.parquet',\n        DATA_SOURCE = 'AzureOpenData',\n        FORMAT='PARQUET'\n    ) AS uspv;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "PBIDemo",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sandbox SQL script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE [Demo];\nGO\n\nSELECT \n    *\nFROM dimTransactionDetailsVw\n;\n\nSELECT\n    TransactionDetailID\n    , MovieID\n    , CAST( Quantity AS INT ) AS Quantity\n    , ROUND( CAST( UnitCost AS FLOAT ), 2 ) AS UnitCost\n    , CAST( LineNumber AS INT ) AS LineNumber\n    , CAST( ProcessDate AS Date ) AS ProcessDate\nFROM\n    OPENROWSET(\n      BULK 'https://synapsedatalakeg2.blob.core.windows.net/gold/DimTransactionDetails.parquet/*.parquet',\n      FORMAT='PARQUET'\n    ) AS [FTD];\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "Demo",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 00 -- 01 Magic Commands')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/7c9d382c-5964-48db-9cf6-c595c7ba4339/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-syn/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://synapse-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"print('Hello World!')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"println(\"Hello World!\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "csharp"
							},
							"collapsed": true
						},
						"source": [
							"%%csharp\r\n",
							"\r\n",
							"System.Console.WriteLine(\"Hello World!\");"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT \"Hello World!\""
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 01 Daily Revenue')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/7c9d382c-5964-48db-9cf6-c595c7ba4339/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-syn/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://synapse-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"jupyter": {
								"outputs_hidden": true
							},
							"collapsed": false,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load(\r\n",
							"    'abfss://gold@synapsedatalakeg2.dfs.core.windows.net/DimTransactions.parquet/*.snappy.parquet', \r\n",
							"    format='parquet'\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import col\r\n",
							"\r\n",
							"df = df.withColumn(\"TotalCost\", col(\"TotalCost\").cast(\"double\"))\r\n",
							"\r\n",
							"df = df.groupBy(\"TransactionDate\") \\\r\n",
							"    .sum(\"TotalCost\") \\\r\n",
							"    .withColumnRenamed(\"sum(TotalCost)\", \"Revenue\") \\\r\n",
							"    .withColumnRenamed(\"TransactionDate\", \"Date\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.write.mode(\"overwrite\").saveAsTable(\"default.DailyRevenue\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 02 Anomaly Detection')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/7c9d382c-5964-48db-9cf6-c595c7ba4339/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-syn/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://synapse-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import mmlspark\n",
							"\n",
							"if mmlspark.__spark_package_version__ < \"1.0.0-rc3\":\n",
							"    raise Exception(\"This notebook is not compatible with the current version of mmlspark: {}. Please upgrade to 1.0.0-rc3 or higher.\".format(\n",
							"        mmlspark.__spark_package_version__))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from mmlspark.cognitive import *\r\n",
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
							"service_key = mssparkutils.credentials.getSecret(\"synapse-keyv\", \"AnomalyDetectorKey\", \"AzureKeyVault\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from mmlspark.cognitive import *\r\n",
							"from notebookutils import mssparkutils\r\n",
							"from pyspark.sql.functions import lit\r\n",
							"\r\n",
							"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
							"service_key = mssparkutils.credentials.getSecret(\"synapse-keyv\", \"AnomalyDetectorKey\", \"AzureKeyVault\")\r\n",
							"\r\n",
							"# Load the data into a Spark DataFrame\r\n",
							"df = spark.sql(\"SELECT * FROM default.dailyrevenue\") \\\r\n",
							"    .withColumn(\"group\", lit(\"series1\"))\r\n",
							"\r\n",
							"anomalyDetector = (SimpleDetectAnomalies()\r\n",
							"    .setLocation(\"eastus\")\r\n",
							"    .setSubscriptionKey(service_key)\r\n",
							"    .setOutputCol(\"output\")\r\n",
							"    .setErrorCol(\"error\")\r\n",
							"    .setGranularity(\"daily\")\r\n",
							"    .setTimestampCol(\"Date\")\r\n",
							"    .setValueCol(\"Revenue\")\r\n",
							"    .setGroupbyCol(\"group\")\r\n",
							")\r\n",
							"\r\n",
							"results = anomalyDetector.transform(df)\r\n",
							"\r\n",
							"# Show the results\r\n",
							"display(results.select(\"Date\", \"Revenue\", \"Date\", \"output.*\", \"error\"))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 03 AutoML Forecast Train')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/7c9d382c-5964-48db-9cf6-c595c7ba4339/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-syn/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://synapse-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import azureml.core\n",
							"\n",
							"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.data.dataset_factory import TabularDatasetFactory"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id = \"7c9d382c-5964-48db-9cf6-c595c7ba4339\"\n",
							"resource_group = \"synapse-rg\"\n",
							"workspace_name = \"synapse-aml\"\n",
							"experiment_name = \"synapse-syn-dailyrevenue-20210408012050\"\n",
							"\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"experiment = Experiment(ws, experiment_name)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.sql(\"SELECT * FROM default.dailyrevenue\")\n",
							"\n",
							"datastore = Datastore.get_default(ws)\n",
							"dataset = TabularDatasetFactory.register_spark_dataframe(df, datastore, name = experiment_name + \"-dataset\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.automl.core.forecasting_parameters import ForecastingParameters\n",
							"\n",
							"forecasting_parameters = ForecastingParameters(\n",
							"    time_column_name = \"Date\",\n",
							"    forecast_horizon = \"auto\",\n",
							")\n",
							"\n",
							"automl_config = AutoMLConfig(spark_context = sc,\n",
							"                             task = \"forecasting\",\n",
							"                             training_data = dataset,\n",
							"                             label_column_name = \"Revenue\",\n",
							"                             primary_metric = \"normalized_root_mean_squared_error\",\n",
							"                             experiment_timeout_hours = 3,\n",
							"                             max_concurrent_iterations = 2,\n",
							"                             n_cross_validations = 5,\n",
							"                             forecasting_parameters = forecasting_parameters)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"run = experiment.submit(automl_config)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"run.wait_for_completion()\n",
							"\n",
							"import mlflow\n",
							"\n",
							"# Get best model from automl run\n",
							"best_run, non_onnx_model = run.get_output()\n",
							"\n",
							"artifact_path = experiment_name + \"_artifact\"\n",
							"\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
							"mlflow.set_experiment(experiment_name)\n",
							"\n",
							"with mlflow.start_run() as run:\n",
							"    # Save the model to the outputs directory for capture\n",
							"    mlflow.sklearn.log_model(non_onnx_model, artifact_path)\n",
							"\n",
							"    # Register the model to AML model registry\n",
							"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"synapse-syn-dailyrevenue-20210408012050-Best\")"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo 01 -- 04 AutoML Forecast Predict')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"9332c06e-629c-417c-b094-e61f57c00a88": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"Date": "2017-04-04 00:00:00.0000000",
												"Revenue": 16710.509999999973,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-14 00:00:00.0000000",
												"Revenue": 22342.309999999943,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-05 00:00:00.0000000",
												"Revenue": 16445.629999999972,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-23 00:00:00.0000000",
												"Revenue": 2958.3100000000004,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-02 00:00:00.0000000",
												"Revenue": 14541.729999999981,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-18 00:00:00.0000000",
												"Revenue": 7740.570000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-06 00:00:00.0000000",
												"Revenue": 13247.439999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-22 00:00:00.0000000",
												"Revenue": 18014.73999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-18 00:00:00.0000000",
												"Revenue": 11698.37999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-17 00:00:00.0000000",
												"Revenue": 9639.48,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-21 00:00:00.0000000",
												"Revenue": 15161.389999999978,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-14 00:00:00.0000000",
												"Revenue": 10688.939999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-12 00:00:00.0000000",
												"Revenue": 16340.709999999972,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-10 00:00:00.0000000",
												"Revenue": 11223.589999999993,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-24 00:00:00.0000000",
												"Revenue": 8929.95,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-22 00:00:00.0000000",
												"Revenue": 12308.019999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-16 00:00:00.0000000",
												"Revenue": 15076.42999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-17 00:00:00.0000000",
												"Revenue": 17799.869999999966,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-30 00:00:00.0000000",
												"Revenue": 18119.709999999963,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-24 00:00:00.0000000",
												"Revenue": 2353.6500000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-30 00:00:00.0000000",
												"Revenue": 11703.359999999991,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-27 00:00:00.0000000",
												"Revenue": 15815.989999999974,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-13 00:00:00.0000000",
												"Revenue": 9049.839999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-19 00:00:00.0000000",
												"Revenue": 17280.199999999968,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-26 00:00:00.0000000",
												"Revenue": 20098.549999999956,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-25 00:00:00.0000000",
												"Revenue": 17999.759999999966,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-09 00:00:00.0000000",
												"Revenue": 10094.259999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-17 00:00:00.0000000",
												"Revenue": 4377.510000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-07 00:00:00.0000000",
												"Revenue": 2508.5700000000006,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-09 00:00:00.0000000",
												"Revenue": 4862.250000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-30 00:00:00.0000000",
												"Revenue": 3203.190000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-26 00:00:00.0000000",
												"Revenue": 6851.100000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-02 00:00:00.0000000",
												"Revenue": 7080.940000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-04 00:00:00.0000000",
												"Revenue": 5936.620000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-05 00:00:00.0000000",
												"Revenue": 4197.620000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-04 00:00:00.0000000",
												"Revenue": 18814.37999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-02 00:00:00.0000000",
												"Revenue": 11053.739999999993,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-07 00:00:00.0000000",
												"Revenue": 14696.64999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-01 00:00:00.0000000",
												"Revenue": 13492.309999999983,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-16 00:00:00.0000000",
												"Revenue": 18934.26999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-06 00:00:00.0000000",
												"Revenue": 5377.310000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-10 00:00:00.0000000",
												"Revenue": 9764.479999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-24 00:00:00.0000000",
												"Revenue": 19034.19999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-19 00:00:00.0000000",
												"Revenue": 14726.639999999978,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-11 00:00:00.0000000",
												"Revenue": 19398.959999999963,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-30 00:00:00.0000000",
												"Revenue": 6246.430000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-08 00:00:00.0000000",
												"Revenue": 3827.830000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-10 00:00:00.0000000",
												"Revenue": 7555.690000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-11 00:00:00.0000000",
												"Revenue": 13022.59999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-21 00:00:00.0000000",
												"Revenue": 12692.819999999985,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-01 00:00:00.0000000",
												"Revenue": 6096.5300000000025,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-01 00:00:00.0000000",
												"Revenue": 14786.569999999982,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-29 00:00:00.0000000",
												"Revenue": 8290.260000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-23 00:00:00.0000000",
												"Revenue": 10194.179999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-01 00:00:00.0000000",
												"Revenue": 14161.929999999978,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-28 00:00:00.0000000",
												"Revenue": 10648.919999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-27 00:00:00.0000000",
												"Revenue": 10229.139999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-13 00:00:00.0000000",
												"Revenue": 14531.699999999984,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-28 00:00:00.0000000",
												"Revenue": 3098.2300000000014,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-26 00:00:00.0000000",
												"Revenue": 12767.699999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-28 00:00:00.0000000",
												"Revenue": 18469.499999999964,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-18 00:00:00.0000000",
												"Revenue": 7380.820000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-26 00:00:00.0000000",
												"Revenue": 12662.799999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-08 00:00:00.0000000",
												"Revenue": 16025.889999999972,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-22 00:00:00.0000000",
												"Revenue": 6786.090000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-05 00:00:00.0000000",
												"Revenue": 3962.740000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-17 00:00:00.0000000",
												"Revenue": 18799.31999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-13 00:00:00.0000000",
												"Revenue": 3622.960000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-17 00:00:00.0000000",
												"Revenue": 4327.520000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-07 00:00:00.0000000",
												"Revenue": 11383.519999999993,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-23 00:00:00.0000000",
												"Revenue": 2858.370000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-11 00:00:00.0000000",
												"Revenue": 1818.97,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-24 00:00:00.0000000",
												"Revenue": 5661.810000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-31 00:00:00.0000000",
												"Revenue": 11278.569999999992,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-04 00:00:00.0000000",
												"Revenue": 3113.2400000000007,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-13 00:00:00.0000000",
												"Revenue": 1609.07,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-26 00:00:00.0000000",
												"Revenue": 4647.350000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-14 00:00:00.0000000",
												"Revenue": 11868.25999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-07 00:00:00.0000000",
												"Revenue": 17080.339999999967,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-27 00:00:00.0000000",
												"Revenue": 12597.859999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-19 00:00:00.0000000",
												"Revenue": 7760.580000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-31 00:00:00.0000000",
												"Revenue": 4692.340000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-22 00:00:00.0000000",
												"Revenue": 10893.809999999994,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-25 00:00:00.0000000",
												"Revenue": 14476.789999999975,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-08 00:00:00.0000000",
												"Revenue": 9619.549999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-25 00:00:00.0000000",
												"Revenue": 9294.689999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-03 00:00:00.0000000",
												"Revenue": 4917.200000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-22 00:00:00.0000000",
												"Revenue": 5466.890000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-21 00:00:00.0000000",
												"Revenue": 7690.630000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-23 00:00:00.0000000",
												"Revenue": 20048.579999999954,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-11 00:00:00.0000000",
												"Revenue": 7540.710000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-06 00:00:00.0000000",
												"Revenue": 4262.580000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-26 00:00:00.0000000",
												"Revenue": 11478.46999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-09 00:00:00.0000000",
												"Revenue": 12308.049999999987,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-28 00:00:00.0000000",
												"Revenue": 8360.220000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-08 00:00:00.0000000",
												"Revenue": 20353.43999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-21 00:00:00.0000000",
												"Revenue": 8620.130000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-28 00:00:00.0000000",
												"Revenue": 9959.339999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-25 00:00:00.0000000",
												"Revenue": 9399.65,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-27 00:00:00.0000000",
												"Revenue": 12722.789999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-16 00:00:00.0000000",
												"Revenue": 6976.020000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-13 00:00:00.0000000",
												"Revenue": 5977.010000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-08 00:00:00.0000000",
												"Revenue": 15431.199999999979,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-09 00:00:00.0000000",
												"Revenue": 3448.050000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-05 00:00:00.0000000",
												"Revenue": 6736.180000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-23 00:00:00.0000000",
												"Revenue": 8495.180000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-20 00:00:00.0000000",
												"Revenue": 9759.439999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-22 00:00:00.0000000",
												"Revenue": 2678.4700000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-12 00:00:00.0000000",
												"Revenue": 18019.74999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-18 00:00:00.0000000",
												"Revenue": 10429.079999999994,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-01 00:00:00.0000000",
												"Revenue": 9119.83,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-16 00:00:00.0000000",
												"Revenue": 5237.030000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-24 00:00:00.0000000",
												"Revenue": 17285.149999999965,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-13 00:00:00.0000000",
												"Revenue": 13257.489999999983,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-20 00:00:00.0000000",
												"Revenue": 5102.100000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-25 00:00:00.0000000",
												"Revenue": 4427.470000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-02 00:00:00.0000000",
												"Revenue": 10139.219999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-13 00:00:00.0000000",
												"Revenue": 2993.3000000000006,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-27 00:00:00.0000000",
												"Revenue": 9169.74,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-08 00:00:00.0000000",
												"Revenue": 5906.620000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-07 00:00:00.0000000",
												"Revenue": 15910.959999999974,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-20 00:00:00.0000000",
												"Revenue": 6636.230000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-25 00:00:00.0000000",
												"Revenue": 17285.199999999964,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-03 00:00:00.0000000",
												"Revenue": 10419.069999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-22 00:00:00.0000000",
												"Revenue": 14141.91999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-26 00:00:00.0000000",
												"Revenue": 15286.319999999974,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-24 00:00:00.0000000",
												"Revenue": 11923.249999999989,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-11 00:00:00.0000000",
												"Revenue": 3488.030000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-30 00:00:00.0000000",
												"Revenue": 5461.910000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-19 00:00:00.0000000",
												"Revenue": 19174.079999999965,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-16 00:00:00.0000000",
												"Revenue": 12462.869999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-27 00:00:00.0000000",
												"Revenue": 4722.330000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-15 00:00:00.0000000",
												"Revenue": 13667.219999999983,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-27 00:00:00.0000000",
												"Revenue": 24066.34999999993,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-02 00:00:00.0000000",
												"Revenue": 11318.589999999991,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-17 00:00:00.0000000",
												"Revenue": 11743.289999999992,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-12 00:00:00.0000000",
												"Revenue": 14646.669999999978,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-16 00:00:00.0000000",
												"Revenue": 6921.070000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-14 00:00:00.0000000",
												"Revenue": 18514.419999999962,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-16 00:00:00.0000000",
												"Revenue": 12248.04999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-26 00:00:00.0000000",
												"Revenue": 3807.8300000000013,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-28 00:00:00.0000000",
												"Revenue": 13342.399999999985,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-29 00:00:00.0000000",
												"Revenue": 4437.470000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-31 00:00:00.0000000",
												"Revenue": 14246.939999999984,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-28 00:00:00.0000000",
												"Revenue": 21008.029999999948,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-05 00:00:00.0000000",
												"Revenue": 10519.039999999994,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-12 00:00:00.0000000",
												"Revenue": 7216.390000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-15 00:00:00.0000000",
												"Revenue": 8590.109999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-29 00:00:00.0000000",
												"Revenue": 8060.440000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-31 00:00:00.0000000",
												"Revenue": 16925.38999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-18 00:00:00.0000000",
												"Revenue": 17050.32999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-19 00:00:00.0000000",
												"Revenue": 12552.869999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-17 00:00:00.0000000",
												"Revenue": 9989.329999999994,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-25 00:00:00.0000000",
												"Revenue": 14551.729999999981,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-11 00:00:00.0000000",
												"Revenue": 15985.929999999975,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-13 00:00:00.0000000",
												"Revenue": 20223.599999999944,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-20 00:00:00.0000000",
												"Revenue": 15331.269999999979,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-07 00:00:00.0000000",
												"Revenue": 6186.480000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-28 00:00:00.0000000",
												"Revenue": 6071.550000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-13 00:00:00.0000000",
												"Revenue": 9929.369999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-16 00:00:00.0000000",
												"Revenue": 4622.370000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-30 00:00:00.0000000",
												"Revenue": 14266.859999999982,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-12 00:00:00.0000000",
												"Revenue": 13457.349999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-13 00:00:00.0000000",
												"Revenue": 5976.600000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-05 00:00:00.0000000",
												"Revenue": 7076.460000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-22 00:00:00.0000000",
												"Revenue": 11098.669999999993,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-29 00:00:00.0000000",
												"Revenue": 15286.289999999977,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-20 00:00:00.0000000",
												"Revenue": 5147.0700000000015,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-15 00:00:00.0000000",
												"Revenue": 6841.090000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-02 00:00:00.0000000",
												"Revenue": 3787.8500000000013,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-02 00:00:00.0000000",
												"Revenue": 19114.13999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-16 00:00:00.0000000",
												"Revenue": 11123.669999999993,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-27 00:00:00.0000000",
												"Revenue": 10184.229999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-16 00:00:00.0000000",
												"Revenue": 14686.659999999982,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-27 00:00:00.0000000",
												"Revenue": 2363.6600000000008,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-07 00:00:00.0000000",
												"Revenue": 17110.29999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-28 00:00:00.0000000",
												"Revenue": 17050.339999999967,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-21 00:00:00.0000000",
												"Revenue": 3922.780000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-07 00:00:00.0000000",
												"Revenue": 8560.100000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-03 00:00:00.0000000",
												"Revenue": 9194.779999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-29 00:00:00.0000000",
												"Revenue": 19044.149999999965,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-12 00:00:00.0000000",
												"Revenue": 5906.660000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-17 00:00:00.0000000",
												"Revenue": 14946.48999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-31 00:00:00.0000000",
												"Revenue": 3552.9800000000014,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-22 00:00:00.0000000",
												"Revenue": 4797.280000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-20 00:00:00.0000000",
												"Revenue": 3368.080000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-15 00:00:00.0000000",
												"Revenue": 5876.650000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-03 00:00:00.0000000",
												"Revenue": 8150.350000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-01 00:00:00.0000000",
												"Revenue": 14126.979999999981,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-03 00:00:00.0000000",
												"Revenue": 11883.229999999989,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-09 00:00:00.0000000",
												"Revenue": 1859.0700000000006,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-14 00:00:00.0000000",
												"Revenue": 18149.709999999963,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-10 00:00:00.0000000",
												"Revenue": 3048.270000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-19 00:00:00.0000000",
												"Revenue": 3922.7700000000013,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-18 00:00:00.0000000",
												"Revenue": 14951.529999999977,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-14 00:00:00.0000000",
												"Revenue": 9109.81,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-19 00:00:00.0000000",
												"Revenue": 5032.160000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-02 00:00:00.0000000",
												"Revenue": 12572.859999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-04 00:00:00.0000000",
												"Revenue": 8959.9,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-08 00:00:00.0000000",
												"Revenue": 12667.779999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-01 00:00:00.0000000",
												"Revenue": 17385.129999999972,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-26 00:00:00.0000000",
												"Revenue": 18894.249999999956,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-25 00:00:00.0000000",
												"Revenue": 15856.019999999975,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-10 00:00:00.0000000",
												"Revenue": 3652.9400000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-14 00:00:00.0000000",
												"Revenue": 4337.830000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-04 00:00:00.0000000",
												"Revenue": 7980.420000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-23 00:00:00.0000000",
												"Revenue": 8675.070000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-26 00:00:00.0000000",
												"Revenue": 14721.639999999978,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-14 00:00:00.0000000",
												"Revenue": 10863.82999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-17 00:00:00.0000000",
												"Revenue": 13067.529999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-19 00:00:00.0000000",
												"Revenue": 8859.970000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-12 00:00:00.0000000",
												"Revenue": 3183.190000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-10 00:00:00.0000000",
												"Revenue": 16905.419999999976,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-05 00:00:00.0000000",
												"Revenue": 14396.78999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-03 00:00:00.0000000",
												"Revenue": 5921.640000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-23 00:00:00.0000000",
												"Revenue": 14146.929999999982,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-05 00:00:00.0000000",
												"Revenue": 5032.140000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-21 00:00:00.0000000",
												"Revenue": 7060.9900000000025,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-28 00:00:00.0000000",
												"Revenue": 16230.77999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-06 00:00:00.0000000",
												"Revenue": 14171.909999999985,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-16 00:00:00.0000000",
												"Revenue": 2018.9900000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-03 00:00:00.0000000",
												"Revenue": 9124.789999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-20 00:00:00.0000000",
												"Revenue": 18859.29999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-24 00:00:00.0000000",
												"Revenue": 2473.6100000000006,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-20 00:00:00.0000000",
												"Revenue": 9429.639999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-19 00:00:00.0000000",
												"Revenue": 5277.000000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-15 00:00:00.0000000",
												"Revenue": 7835.520000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-18 00:00:00.0000000",
												"Revenue": 15291.319999999976,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-21 00:00:00.0000000",
												"Revenue": 3003.2800000000007,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-23 00:00:00.0000000",
												"Revenue": 4237.600000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-06 00:00:00.0000000",
												"Revenue": 14316.859999999982,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-21 00:00:00.0000000",
												"Revenue": 17150.249999999964,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-06 00:00:00.0000000",
												"Revenue": 10074.279999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-22 00:00:00.0000000",
												"Revenue": 14721.60999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-10 00:00:00.0000000",
												"Revenue": 5222.0300000000025,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-04 00:00:00.0000000",
												"Revenue": 2323.6700000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-13 00:00:00.0000000",
												"Revenue": 12043.14999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-09 00:00:00.0000000",
												"Revenue": 17490.089999999967,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-29 00:00:00.0000000",
												"Revenue": 17370.10999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-22 00:00:00.0000000",
												"Revenue": 17520.029999999973,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-28 00:00:00.0000000",
												"Revenue": 6796.150000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-05 00:00:00.0000000",
												"Revenue": 17030.33999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-07 00:00:00.0000000",
												"Revenue": 9884.349999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-09 00:00:00.0000000",
												"Revenue": 5991.580000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-03 00:00:00.0000000",
												"Revenue": 17849.87999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-25 00:00:00.0000000",
												"Revenue": 6581.260000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-29 00:00:00.0000000",
												"Revenue": 14311.879999999983,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-08 00:00:00.0000000",
												"Revenue": 7685.610000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-25 00:00:00.0000000",
												"Revenue": 4312.550000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-17 00:00:00.0000000",
												"Revenue": 2638.5000000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-06 00:00:00.0000000",
												"Revenue": 3662.920000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-25 00:00:00.0000000",
												"Revenue": 6571.260000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-06 00:00:00.0000000",
												"Revenue": 19014.179999999964,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-03 00:00:00.0000000",
												"Revenue": 16185.809999999972,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-30 00:00:00.0000000",
												"Revenue": 6681.220000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-30 00:00:00.0000000",
												"Revenue": 8295.270000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-14 00:00:00.0000000",
												"Revenue": 8385.190000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-11 00:00:00.0000000",
												"Revenue": 11078.699999999992,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-29 00:00:00.0000000",
												"Revenue": 9094.82,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-17 00:00:00.0000000",
												"Revenue": 9469.579999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-16 00:00:00.0000000",
												"Revenue": 3582.970000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-05 00:00:00.0000000",
												"Revenue": 12278.069999999985,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-20 00:00:00.0000000",
												"Revenue": 11273.599999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-11 00:00:00.0000000",
												"Revenue": 9075.459999999994,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-10 00:00:00.0000000",
												"Revenue": 17934.839999999967,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-31 00:00:00.0000000",
												"Revenue": 8550.130000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-01 00:00:00.0000000",
												"Revenue": 5761.710000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-10 00:00:00.0000000",
												"Revenue": 14526.73999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-15 00:00:00.0000000",
												"Revenue": 15576.119999999977,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-04 00:00:00.0000000",
												"Revenue": 8275.859999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-18 00:00:00.0000000",
												"Revenue": 2253.6900000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-24 00:00:00.0000000",
												"Revenue": 6616.230000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-03 00:00:00.0000000",
												"Revenue": 4092.680000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-30 00:00:00.0000000",
												"Revenue": 12622.799999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-18 00:00:00.0000000",
												"Revenue": 6851.090000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-08 00:00:00.0000000",
												"Revenue": 3138.430000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-11 00:00:00.0000000",
												"Revenue": 7760.6100000000015,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-29 00:00:00.0000000",
												"Revenue": 10199.189999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-24 00:00:00.0000000",
												"Revenue": 8764.990000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-21 00:00:00.0000000",
												"Revenue": 18119.73999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-11 00:00:00.0000000",
												"Revenue": 17779.909999999963,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-26 00:00:00.0000000",
												"Revenue": 6581.260000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-15 00:00:00.0000000",
												"Revenue": 9079.81,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-01 00:00:00.0000000",
												"Revenue": 8844.980000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-20 00:00:00.0000000",
												"Revenue": 3253.1400000000012,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-18 00:00:00.0000000",
												"Revenue": 16015.939999999973,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-12 00:00:00.0000000",
												"Revenue": 5356.950000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-02 00:00:00.0000000",
												"Revenue": 4297.560000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-15 00:00:00.0000000",
												"Revenue": 4397.490000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-08 00:00:00.0000000",
												"Revenue": 12482.929999999986,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-02 00:00:00.0000000",
												"Revenue": 7930.5,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-10 00:00:00.0000000",
												"Revenue": 10634.679999999977,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-01 00:00:00.0000000",
												"Revenue": 4142.6500000000015,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-05 00:00:00.0000000",
												"Revenue": 17200.259999999966,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-06 00:00:00.0000000",
												"Revenue": 12183.079999999987,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-20 00:00:00.0000000",
												"Revenue": 15661.109999999975,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-26 00:00:00.0000000",
												"Revenue": 4627.370000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-19 00:00:00.0000000",
												"Revenue": 13862.109999999979,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-15 00:00:00.0000000",
												"Revenue": 14311.889999999983,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-29 00:00:00.0000000",
												"Revenue": 5586.800000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-14 00:00:00.0000000",
												"Revenue": 3438.040000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-23 00:00:00.0000000",
												"Revenue": 14941.509999999977,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-15 00:00:00.0000000",
												"Revenue": 3298.350000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-15 00:00:00.0000000",
												"Revenue": 18474.499999999964,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-18 00:00:00.0000000",
												"Revenue": 2438.6100000000006,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-07 00:00:00.0000000",
												"Revenue": 9604.539999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-10 00:00:00.0000000",
												"Revenue": 7006.020000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-20 00:00:00.0000000",
												"Revenue": 11303.589999999991,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-09 00:00:00.0000000",
												"Revenue": 10409.069999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-18 00:00:00.0000000",
												"Revenue": 10039.259999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-09 00:00:00.0000000",
												"Revenue": 4937.220000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-31 00:00:00.0000000",
												"Revenue": 17000.36999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-27 00:00:00.0000000",
												"Revenue": 4677.340000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-04 00:00:00.0000000",
												"Revenue": 12597.83999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-27 00:00:00.0000000",
												"Revenue": 2828.3900000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-15 00:00:00.0000000",
												"Revenue": 17125.23999999997,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-06 00:00:00.0000000",
												"Revenue": 2693.4700000000007,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-02 00:00:00.0000000",
												"Revenue": 6476.330000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-11 00:00:00.0000000",
												"Revenue": 4897.210000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-24 00:00:00.0000000",
												"Revenue": 12043.14999999999,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-04 00:00:00.0000000",
												"Revenue": 14766.66999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-10 00:00:00.0000000",
												"Revenue": 3068.2400000000007,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-27 00:00:00.0000000",
												"Revenue": 17130.299999999967,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-06 00:00:00.0000000",
												"Revenue": 8490.170000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-12 00:00:00.0000000",
												"Revenue": 2803.420000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-03 00:00:00.0000000",
												"Revenue": 2298.6900000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-24 00:00:00.0000000",
												"Revenue": 8260.300000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-11 00:00:00.0000000",
												"Revenue": 5361.930000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-19 00:00:00.0000000",
												"Revenue": 12298.039999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-07 00:00:00.0000000",
												"Revenue": 12178.099999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-06-25 00:00:00.0000000",
												"Revenue": 5641.810000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-23 00:00:00.0000000",
												"Revenue": 12752.719999999987,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-14 00:00:00.0000000",
												"Revenue": 16125.839999999975,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-12 00:00:00.0000000",
												"Revenue": 10039.309999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-06 00:00:00.0000000",
												"Revenue": 2893.3500000000004,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-04 00:00:00.0000000",
												"Revenue": 7045.980000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-19 00:00:00.0000000",
												"Revenue": 7011.010000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-09 00:00:00.0000000",
												"Revenue": 11358.549999999992,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-12 00:00:00.0000000",
												"Revenue": 8829.98,
												"Forecasted": 0
											},
											{
												"Date": "2017-09-09 00:00:00.0000000",
												"Revenue": 7825.530000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-17 00:00:00.0000000",
												"Revenue": 3403.0500000000006,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-13 00:00:00.0000000",
												"Revenue": 13472.36999999998,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-07 00:00:00.0000000",
												"Revenue": 4757.620000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-21 00:00:00.0000000",
												"Revenue": 12697.769999999988,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-12 00:00:00.0000000",
												"Revenue": 17100.289999999968,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-24 00:00:00.0000000",
												"Revenue": 18019.779999999966,
												"Forecasted": 0
											},
											{
												"Date": "2017-01-03 00:00:00.0000000",
												"Revenue": 9835.079999999985,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-09 00:00:00.0000000",
												"Revenue": 19843.699999999957,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-29 00:00:00.0000000",
												"Revenue": 2833.4000000000005,
												"Forecasted": 0
											},
											{
												"Date": "2017-02-04 00:00:00.0000000",
												"Revenue": 7030.980000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-05-14 00:00:00.0000000",
												"Revenue": 6446.350000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-23 00:00:00.0000000",
												"Revenue": 10609.009999999995,
												"Forecasted": 0
											},
											{
												"Date": "2017-11-05 00:00:00.0000000",
												"Revenue": 5451.900000000002,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-01 00:00:00.0000000",
												"Revenue": 11233.609999999991,
												"Forecasted": 0
											},
											{
												"Date": "2017-07-08 00:00:00.0000000",
												"Revenue": 7330.8200000000015,
												"Forecasted": 0
											},
											{
												"Date": "2017-08-30 00:00:00.0000000",
												"Revenue": 13997.039999999979,
												"Forecasted": 0
											},
											{
												"Date": "2017-10-30 00:00:00.0000000",
												"Revenue": 2518.5600000000004,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-23 00:00:00.0000000",
												"Revenue": 4457.480000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-22 00:00:00.0000000",
												"Revenue": 6921.070000000003,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-28 00:00:00.0000000",
												"Revenue": 12048.159999999989,
												"Forecasted": 0
											},
											{
												"Date": "2017-12-08 00:00:00.0000000",
												"Revenue": 8155.330000000001,
												"Forecasted": 0
											},
											{
												"Date": "2017-03-21 00:00:00.0000000",
												"Revenue": 19114.13999999996,
												"Forecasted": 0
											},
											{
												"Date": "2017-04-21 00:00:00.0000000",
												"Revenue": 9059.830000000002,
												"Forecasted": 0
											},
											{
												"Date": "2018-01-01 00:00:00",
												"Revenue": 1704.5942850792812,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-02 00:00:00",
												"Revenue": 11083.741396599715,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-03 00:00:00",
												"Revenue": 8525.144962817738,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-04 00:00:00",
												"Revenue": 7137.419608577422,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-05 00:00:00",
												"Revenue": 6478.80547308825,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-06 00:00:00",
												"Revenue": 4923.9116112371385,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-07 00:00:00",
												"Revenue": 3345.6410866947886,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-08 00:00:00",
												"Revenue": 1866.4841036808948,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-09 00:00:00",
												"Revenue": 12429.99520328702,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-10 00:00:00",
												"Revenue": 9882.826828136242,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-11 00:00:00",
												"Revenue": 7753.041481780579,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-12 00:00:00",
												"Revenue": 6184.490550112058,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-13 00:00:00",
												"Revenue": 4775.859447905529,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-14 00:00:00",
												"Revenue": 3496.1696497577464,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-15 00:00:00",
												"Revenue": 2280.187027300863,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-16 00:00:00",
												"Revenue": 15724.942410206932,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-17 00:00:00",
												"Revenue": 14707.717799101953,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-18 00:00:00",
												"Revenue": 11912.640813956934,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-19 00:00:00",
												"Revenue": 9762.362073913893,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-20 00:00:00",
												"Revenue": 7740.214241682353,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-21 00:00:00",
												"Revenue": 5287.218603346393,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-22 00:00:00",
												"Revenue": 3058.871214394155,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-23 00:00:00",
												"Revenue": 17648.306063899272,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-24 00:00:00",
												"Revenue": 14880.080199404525,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-25 00:00:00",
												"Revenue": 12407.945974520217,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-26 00:00:00",
												"Revenue": 10250.126833425606,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-27 00:00:00",
												"Revenue": 8248.666211821863,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-28 00:00:00",
												"Revenue": 5758.675475145576,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-29 00:00:00",
												"Revenue": 3047.3586665648527,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-30 00:00:00",
												"Revenue": 16944.867466765376,
												"Forecasted": 20000
											},
											{
												"Date": "2018-01-31 00:00:00",
												"Revenue": 13993.862576710684,
												"Forecasted": 20000
											},
											{
												"Date": "2018-02-01 00:00:00",
												"Revenue": 10918.38059354186,
												"Forecasted": 20000
											}
										],
										"schema": {
											"Date": "string",
											"Revenue": "double",
											"Forecasted": "int"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "line",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"Date"
											],
											"seriesFieldKeys": [
												"Revenue",
												"Forecasted"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/7c9d382c-5964-48db-9cf6-c595c7ba4339/resourceGroups/synapse-rg/providers/Microsoft.Synapse/workspaces/synapse-syn/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://synapse-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import azureml.core\r\n",
							"from azureml.core import Workspace\r\n",
							"\r\n",
							"\r\n",
							"subscription_id = \"7c9d382c-5964-48db-9cf6-c595c7ba4339\"\r\n",
							"resource_group = \"synapse-rg\"\r\n",
							"workspace_name = \"synapse-aml\"\r\n",
							"\r\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import lit\r\n",
							"\r\n",
							"df_orig = spark.sql(\"SELECT * FROM default.dailyrevenue\")\r\n",
							"df_orig = df_orig.withColumn('Forecasted', lit(0))\r\n",
							"df_orig.show(10)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"import mlflow\r\n",
							"\r\n",
							"\r\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\r\n",
							"print(f'MLFlow Tracking URI: {ws.get_mlflow_tracking_uri()}')"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import pandas as pd\r\n",
							"\r\n",
							"\r\n",
							"model_path = 'azureml://experiments/synapse-syn-dailyrevenue-20210408012050/runs/26f87a5b-83eb-494f-a976-7d726dbdfd18/artifacts/synapse-syn-dailyrevenue-20210408012050_artifact/'\r\n",
							"model = mlflow.sklearn.load_model(model_path)\r\n",
							"\r\n",
							"d = {\r\n",
							"    'Date': pd.date_range(start='1/01/2018', end='2/01/2018')\r\n",
							"}\r\n",
							"pdf = pd.DataFrame(data=d)\r\n",
							"\r\n",
							"pdf_forecast = model.forecast(pdf)[1]\r\n",
							"pdf_forecast.reset_index(inplace=True)\r\n",
							"pdf_forecast = pdf_forecast.rename(columns = {'index':'Date'})\r\n",
							"\r\n",
							"print(pdf_forecast.head(5))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import lit\r\n",
							"\r\n",
							"\r\n",
							"df_forecast = spark.createDataFrame(pdf_forecast)\r\n",
							"df_forecast = (df_forecast\r\n",
							"    .select('Date', '_automl_target_col')\r\n",
							"    .withColumnRenamed('_automl_target_col', 'Revenue')\r\n",
							"    .withColumn('Forecasted', lit(20000))\r\n",
							")\r\n",
							"\r\n",
							"df_forecast.show(5)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = df_orig.union(df_forecast)\r\n",
							"\r\n",
							"display(df) # create line graph to visualize the forecast"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		}
	]
}